<?php


/**
 * Implements hook_menu
 */
function hc_votes_menu() {
  $items = array();
  
  $items['vote/%'] = array(
    'title' => t('Voting'),
    'page callback' => '_hc_votes_vote',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  
  return $items;
}



/**
 * Helper function for registering vote
 */
function _hc_votes_vote($uid) {



  global $language;
  
  switch ($language->language) {
    case 'nl':
    default:
		  $url = url("kandidaten", array('absolute' => TRUE));    
		  break;
		case 'fr':
		  $url = url("candidats", array('absolute' => TRUE));    
		  break;
  }

  $votes = array(
    'entity_type' => 'user',
    'entity_id' => $uid,
    'value_type' => 'points',
    'value' => 1,
  );
  
  // do IP address check
	$current_ip = ip_address();
	
	$result = db_query("SELECT * FROM {votingapi_vote} WHERE vote_source = :ip AND entity_id = :uid;", array(':ip' => $current_ip, ':uid' => $uid));
	
	if ($result->rowCount() >= 1) {
	  drupal_set_message(t("Je hebt reeds gestemd voor deze kandidaat."), 'error');
	} else {
	  votingapi_set_votes($votes, array());
  
  	$current_results = votingapi_recalculate_results("user", $uid, TRUE);
  
  	foreach($current_results as $delta => $result) {
    	if ($result['function'] == 'count') {
      	$aantal_stemmen = $current_results[$delta]['value'];
    	}
  	}
	  drupal_set_message(t("Bedankt voor je stem.<br />Deze kandidaat heeft nu @stemmen stemmen.", array("@stemmen" => $aantal_stemmen)));
  }
  
  drupal_goto($url);
}