<?php

/**
 * Implements hook_menu
 */
function hc_register_menu() {
  $items['user/%/bevestig'] = array(
    'title' => 'Bevestig je deelname',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hc_register_confirm_form', 1),
    'access arguments' => array('access content'),
  );
  
  return $items;
}


/**
 * Implements hook_form_FORM_ID_alter on registration form
 */
function hc_register_form_user_register_form_alter(&$form, &$form_state) {

	// change the submit function for the registration form
	$form['#submit'] = array(
	  'hc_register_form_submit',
	);

  // change default page title
  drupal_set_title(t('Registreer jezelf om deel te nemen'));
  
  // user picture fieldset
  $form['picture']['#title'] = '';
  $form['picture']['#title_display'] = FALSE;
  $form['picture']['#weight'] = '8';
  $form['picture']['picture_upload']['#description'] = '';
  
  

	// persoonlijke gegevens
	$form['persoonlijke_data'] = array(
	  '#type' => 'markup',
		'#markup' => '<h2 class="legend">' . t('Persoonlijke data') . '</h2>',
	  '#weight' => '-100',
	);
	
	
	// login gegevens
	$form['login_gegevens'] = array(
	  '#type' => 'markup',
	  '#prefix' => '<div class="separator">&nbsp;</div>',
	  '#markup' => '<h2 class="legend">' . t('Login gegevens') . '</h2>',
	  '#weight' => '9',
	);
	
	$form['extra'] = array(
	  '#type' => 'markup',
	  '#markup' => '<div class="separator">&nbsp;</div>',
	  '#weight' => '80',
	);
	
	// user account 
	$form['account']['mail']['#description'] = '';
	$form['account']['pass']['#description'] = '';

	// nieuws
	$form['field_nieuws']['#weight'] = 90;

	// reglement
	$form['field_reglement']['#weight'] = 100;
	
	foreach ($form['field_reglement'] as $delta => $value) {
	  if (is_array($value)) {
	    if (isset($value['#options']['akkoord'])) {
	      $form['field_reglement'][$delta]['#options']['akkoord'] = "Ik ga akkoord met het <a href='#'>wedstrijdreglement.</a>";
	    }
	  }
	}
	
	// motivatie textarea: TODO: language SUPPORT?
	$form['field_user_motivatie']['und'][0]['value']['#resizable'] = FALSE;
	
	// submit button
	$form['actions']['submit']['#value'] = t('Registreer');

/*
	print_r($form);
	exit();
*/

}


/**
 * Implements hook_form_FORM_ID_alter on user edit form
 */
function hc_register_form_user_profile_form_alter(&$form, &$form_state, $form_id) {

	if (isset($_GET['confirm']) && $_GET['confirm'] == TRUE) {
	  $form['#submit'][0] = 'hc_register_profile_form_submit';
	  $form['#actions']['submit']['#value'] = t('Registreer');
	}

  $form['locale']['#weight'] = 23;

	// motivatie textarea: TODO: language SUPPORT?
	$form['field_user_motivatie']['und'][0]['value']['#resizable'] = FALSE;

	$form['picture']['#weight'] = -10;

  // FB message bovenaan zetten
	if (isset($form['account']['fboauth'])) {
	  $form['facebook'] = array(
	    '#type' => 'markup',
	    '#markup' => $form['account']['fboauth']['#markup'],
	    '#weight' => -999,
	  );
	  unset($form['account']['fboauth']);
	}

	foreach ($form['field_reglement'] as $delta => $value) {
	  if (is_array($value)) {
	    if (isset($value['#options']['akkoord'])) {
	      $form['field_reglement'][$delta]['#options']['akkoord'] = "Ik ga akkoord met het <a href='#'>wedstrijdreglement.</a>";
	    }
	  }
	}


}



/**
 * Implements hook_preprocess_page (unset tabs)
 */
function hc_register_preprocess_page(&$vars, $hook) {
  if (arg(0) == 'user') {
		$vars['tabs'] = array();
  }
}

/**
 * Custom submit function for registering users (unset tabs)
 */
function hc_register_form_submit($form, &$form_state) {
  $admin = $form_state['values']['administer_users'];

  if (!variable_get('user_email_verification', TRUE) || $admin) {
    $pass = $form_state['values']['pass'];
  }
  else {
    $pass = user_password();
  }
  $notify = !empty($form_state['values']['notify']);

  // Remove unneeded values.
  form_state_values_clean($form_state);

  $form_state['values']['pass'] = $pass;
  $form_state['values']['init'] = $form_state['values']['mail'];

  $account = $form['#user'];
  
  entity_form_submit_build_entity('user', $account, $form, $form_state);

  // Populate $edit with the properties of $account, which have been edited on
  // this form by taking over all values, which appear in the form values too.
  $edit = array_intersect_key((array) $account, $form_state['values']);

  $account = user_save($account, $edit);

  // Terminate if an error occurred during user_save().
  if (!$account) {
    drupal_set_message(t("Error saving user account."), 'error');
    $form_state['redirect'] = '';
    return;
  }
  $form_state['user'] = $account;
  $form_state['values']['uid'] = $account->uid;

  watchdog('user', 'New user: %name (%email).', array('%name' => $form_state['values']['name'], '%email' => $form_state['values']['mail']), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));

  // Add plain text password into user account to generate mail tokens.
  $account->password = $pass;

  // New administrative account without notification.
  $uri = entity_uri('user', $account);
  if ($admin && !$notify) {
    drupal_set_message(t('Created a new user account for <a href="@url">%name</a>. No e-mail has been sent.', array('@url' => url($uri['path'], $uri['options']), '%name' => $account->name)));
  }
  // No e-mail verification required; log in user immediately.
  elseif (!$admin && !variable_get('user_email_verification', TRUE) && $account->status) {
    _user_mail_notify('register_no_approval_required', $account);
    $form_state['uid'] = $account->uid;
    
    $user_new = entity_metadata_wrapper('user', $account->uid);
    $user_new->field_user_confirmed->set('0');
    $user_new->save();
    
/*
    user_login_submit(array(), $form_state);
    drupal_set_message(t('Registration successful. You are now logged in.'));
*/
    $form_state['redirect'] = 'user/' . $account->uid . '/bevestig';
  }
  // No administrator approval required.
  elseif ($account->status || $notify) {
    $op = $notify ? 'register_admin_created' : 'register_no_approval_required';
    _user_mail_notify($op, $account);
    if ($notify) {
      drupal_set_message(t('A welcome message with further instructions has been e-mailed to the new user <a href="@url">%name</a>.', array('@url' => url($uri['path'], $uri['options']), '%name' => $account->name)));
    }
    else {
      drupal_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));
      $form_state['redirect'] = '';
    }
  }
  // Administrator approval required.
  else {
    _user_mail_notify('register_pending_approval', $account);
    drupal_set_message(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.'));
    $form_state['redirect'] = '';
  }
}


/**
 * Custom form for confirmation participation
 */
function hc_register_confirm_form($form, &$form_state) {
  $uid = arg(1);
  
  $account = entity_metadata_wrapper('user', $uid);
  $firstname = $account->field_user_firstname->value();

	$markup = "Bevestig hier je deelname: " . $firstname;


  $form = array();
  
  // TODO: 
  $form['header'] = array(
    '#type' => 'markup',
    '#markup' => $markup,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Ja, ik neem deel'),
  );

	// TODO: CANCEL button
	$form['cancel'] = array(
	  '#type' => 'submit',
	  '#value' => t('Back'),
	);

  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $uid,
  );

	$form['#submit'] = array(
	  'hc_register_confirm_submit',
	);
  
  return $form;
}


function hc_register_confirm_submit(&$form, &$form_state) {

  $values = $form_state['values'];
	$uid = $values['uid'];

	$clicked_button = $form_state['clicked_button']['#id'];
	
	if ($clicked_button == 'edit-cancel') {
		// first, login this user
		$form_state_user = array();
    $form_state_user['uid'] = $uid;
    user_login_submit(array(), $form_state_user);
	  drupal_goto('user/' . $uid . '/edit', array('query' => array('confirm' => 'true')));
	} else {
	  $account = entity_metadata_wrapper('user', $uid);
	  $account->field_user_confirmed->set('1');
		$account->save();  
	
		drupal_set_message(t('Bedankt. Je neemt nu officieel deel.'));
		drupal_goto();
	}

  

	// Als gebruiker op cancel heeft geklikt:
	// -> log de gebruiker in met dat betreffende UID
	// -> ga naar user/%/edit met aangepaste submit zodat indien gesubmit opnieuw naar user/%/bevestig wordt geleid

}


/**
 * Custom submit function for editing user account
 */
function hc_register_profile_form_submit($form, &$form_state) {
  $account = $form_state['user'];
  $category = $form['#user_category'];
  // Remove unneeded values.
  form_state_values_clean($form_state);

  // Before updating the account entity, keep an unchanged copy for use with
  // user_save() later. This is necessary for modules implementing the user
  // hooks to be able to react on changes by comparing the values of $account
  // and $edit.
  $account_unchanged = clone $account;

  entity_form_submit_build_entity('user', $account, $form, $form_state);

  // Populate $edit with the properties of $account, which have been edited on
  // this form by taking over all values, which appear in the form values too.
  $edit = array_intersect_key((array) $account, $form_state['values']);

  user_save($account_unchanged, $edit, $category);
  $form_state['values']['uid'] = $account->uid;

  if ($category == 'account' && !empty($edit['pass'])) {
    // Remove the password reset tag since a new password was saved.
    unset($_SESSION['pass_reset_'. $account->uid]);
  }
  // Clear the page cache because pages can contain usernames and/or profile information:
  cache_clear_all();
	session_destroy();
	session_start();
	drupal_goto('user/' . $account->uid . '/bevestig');

  drupal_set_message(t('The changes have been saved.'));
}
